/**************************/
/* Variables
/**************************/

$colors: (
    // Utility Colors
    gray-darkest: #262626,
    gray-darker: #333333,
    gray-dark: #474747,
    gray: #808080,
    gray-light: #a6a6a6,
    gray-lighter: #bfbfbf,
    gray-lightest: #d9d9d9,
    black-offset: #181918,
    white-offset: #f1f1f1,
    black: #000000,
    white: #ffffff,
    red: #ff0000,

    // Brand Colors
    brand-green: #009E4A,
    brand-blue: #00A2DD,
    brand-purple: #143478
);

$color-functions: (
    color: 'text',
    background: 'bg'
);

$columns: 30;

$spacing: (
    xxxs: 3px,
    xxs: 5px,
    xs: 10px,
    s: 15px,
    sm: 20px,
    m: 25px,
    ml: 30px,
    l: 40px,
    xl: 65px,
    xxl: 105px,
    xxxl: 160px
);

$font-sizing: (
    xxxs: 8px,
    xxs: 10px,
    xs: 11px,
    s: 13px,
    sm: 15px,
    m: 18px,
    ml: 20px,
    l: 22px,
    xl: 28px,
    xxl: 55px,
    xxxl: 75px,
);

$borders: (
    rounded: 5000px,
    element: 20px,
    element-l: 40px,
    element-s: 10px
);

$eases: (
    ease: cubic-bezier(0,.41,.58,1),
    ease-in-out: cubic-bezier(0.9,0,0,1),
    smooth: cubic-bezier(0.075, 0.820, 0.165, 1),
    smoother: cubic-bezier(0, 1, 0, 1),
);

$breakpoints: (
    xxxxl: 2135px, // Specific    
    xxxl: 2000px,
    xxl: 1650px,
    xl: 1460px,
    l: 1280px,
    ml: 1150px,
    m: 1000px,
    sm: 850px,
    s: 650px,
    xs: 580px,
    xxs: 450px
);

$content-max-widths: (
    xxxs: 350px,
    xxs: 450px,
    xs: 535px,
    s: 1010px,
    sm: 1290px,
    m: 1620px,
    ml: 1850px,
);

/**************************/
/* Functions
/**************************/

@function to-rem($size) {
    $remSize: calc($size / 16px);
    @return #{$remSize}rem;
}

@function color($color) {
    @return map-get($colors, $color);
}

@function space($space, $extra:1) {
    @return map-get($spacing, $space) * $extra;
}

@function font-size($font-size, $extra:1) {
    @return map-get($font-sizing, $font-size) * $extra;
}

@function border($border) {
    @return map-get($borders, $border);
}

@function ease($ease) {
    @return map-get($eases, $ease);
}

$transitions: (
    ease: all 0.3s ease(ease),
    standard: all 0.5s ease(smooth),
    standard-faster: all 0.15s ease(smooth),
);

@function transition($transition) {
    @return map-get($transitions, $transition);
}

@function breakpoint($breakpoint) {
    @return map-get($breakpoints, $breakpoint);
}

@function ratio($width, $height) {
    @return calc(($height / $width) * 100%);
}


/**************************/
/* Mixins
/**************************/

@mixin full-height {
    height:auto;
    min-height:100vh;
}

@mixin absolute-stretch {
    position:absolute;
    width:100%;
    height:100%;
    top:0;right:0;bottom:0;left:0;
}

@mixin absolute-center {
    position:absolute;
    left:50%;
    top:50%;
    transform:translate(-50%,-50%);
}

@mixin img-cover {
    @include absolute-stretch;
    object-fit:cover;
    object-position:center;
}

@mixin img-contain {
    @include absolute-stretch;
    object-fit:contain;
    object-position:center;
}

@mixin delay-transition($last-child, $delay, $initial-delay:0, $child-element:null) {
    @for $i from 1 through $last-child {
        @if $child-element {
            &:nth-child(#{$i}) #{$child-element} {
                transition-delay: #{$initial-delay + ($i * $delay)}s;
            }
        }
        @else {
            &:nth-child(#{$i}) {
                transition-delay: #{$initial-delay + ($i * $delay)}s;
            }
        }
    }
}

@mixin delay-animation($last-child, $delay, $initial-delay:0, $child-element:null) {
    @for $i from 1 through $last-child {
        @if $child-element {
            &:nth-child(#{$i}) #{$child-element} {
                animation-delay: #{$initial-delay + ($i * $delay)}s;
            }
        }
        @else {
            &:nth-child(#{$i}) {
                animation-delay: #{$initial-delay + ($i * $delay)}s;
            }
        }
    }
}

/**************************/
/* Specifics
/**************************/